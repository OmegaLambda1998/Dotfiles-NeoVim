#
# latexindent.pl, version 3.23.6, 2024-01-17
#
# defaultSettings.yaml, the default settings for latexindent.pl
#
# a script that aims to beautify .tex, .sty, .cls files
#
# (or latexindent.exe if you're on Windows)
#
#---------------------------------------------------------------------------------------
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# See http://www.gnu.org/licenses/.
#
# Chris Hughes, 2017
#
# For all communication, please visit: https://github.com/cmhughes/latexindent.pl
#
#---------------------------------------------------------------------------------------
# You should feel encouraged to change anything you like in these settings, but
# it would probably be better to have your own user settings
# files somewhere else - remember that this file may be overwritten
# when you update your tex distribution. Please see the manual linked from:
#
#       https://github.com/cmhughes/latexindent.pl
#
# for details of how to create and configure your own settings files.
#
# Please read the manual (linked from above) first to understand what each switch does.
#
#---------------------------------------------------------------------------------------

# latexindent can be called to act on a file without using the file's extension,
# e.g, simply
#       latexindent myfile
# in which case the choice of file extension is chosen
# according to the choices made in fileExtensionPreference
# Other file extensions can be added.
# default file extension of backup file (if -w switch is active)
# for example, if your .tex file is called
#       myfile.tex
# and you specify the backupExtension as BACKUP.bak then your
# backup file will be
#       myfileBACKUP.bak
backupExtension: ".bak"
# command code block details
commandCodeBlocks:
  commandNameSpecial:
    - amalgamate: 1
    - "@ifnextchar\\["
  roundParenthesesAllowed: 1
  stringsAllowedBetweenArguments:
    - amalgamate: 1
    - "node"
    - "at"
    - "to"
    - "decoration"
    - "\\+\\+"
    - "\\-\\-"
    - "\\#\\#\\d"
# some users may wish to cycle through back up files.
#
# for example, with maxNumberOfBackUps: 4, they may
# wish to delete the oldest back up file, and keep only the most recent.
#
#    copy myfile.bak1 to myfile.bak0
#    copy myfile.bak2 to myfile.bak1
#    copy myfile.bak3 to myfile.bak2
#    copy myfile.bak4 to myfile.bak3
#
# the back up will be written to myfile.bak4
cycleThroughBackUps: 0
# default value of indentation
defaultIndent: "    "
# change dos line breaks into unix
dos2unixlinebreaks: 0
# \begin{document} and \end{document} are treated differently
# by latexindent within filecontents environments
fileContentsEnvironments:
  filecontents: 1
  filecontents*: 1
fileExtensionPreference:
  .bib: 4
  .cls: 3
  .sty: 2
  .tex: 1
# fineTuning allows you to tweak the internal pattern matching that
# is central to latexindent.pl
fineTuning:
  UnNamedGroupingBracesBrackets:
    follow: "\\{|\\[|,|&|\\)|\\(|\\$"
  arguments:
    before: "(?:#\\d\\h*;?,?\\/?)+|\\<.*?\\>"
    between: "_|\\^|\\*"
  commands:
    name: "[+a-zA-Z@\\*0-9_\\:]+?"
  environments:
    name: "[a-zA-Z@\\*0-9_\\\\]+"
  ifElseFi:
    name: "(?!@?if[a-zA-Z@]*?\\{)@?if[a-zA-Z@]*?"
  items:
    canBeFollowedBy: "(?:\\[[^]]*?\\])|(?:<[^>]*?>)"
  keyEqualsValuesBracesBrackets:
    follow: "(?:(?<!\\\\)\\{)|,|(?:(?<!\\\\)\\[)"
    name: "[a-zA-Z@\\*0-9_\\/.:\\#-]+[a-zA-Z@\\*0-9_\\/.\\h\\{\\}:\\#-]*?"
  modifyLineBreaks:
    betterFullStop: "(?x)                                # ignore spaces in the below\n(?:                                 #\n  \\.\\)                              # .) \n  (?!\\h*[a-z])                      # not *followed by* a-z\n)                                   #\n|                                   # OR\n(?:                                 #\n  (?<!                              # not *preceded by*\n    (?:                             #\n      (?:[eE]\\.[gG])                # e.g OR E.g OR e.G OR E.G\n      |                             #\n      (?:[iI]\\.[eE])                # i.e OR I.e OR i.E OR I.E\n      |                             #\n      (?:etc)                       # etc\n      |                             #\n      (?:[wW]\\.[rR]\\.[tT])          # w.r.t OR W.r.t OR w.R.t OR w.r.T OR W.R.t OR W.r.T OR w.R.T OR W.R.T\n    )                               #\n  )                                 #\n)                                   # \n\\.                                  # .\n(?!                                 # not *followed by*\n  (?:                               #\n    [a-zA-Z0-9-~,]                  #\n    |                               #\n    \\),                             # ),\n    |                               #\n    \\)\\.                            # ).\n  )                                 #\n)                                   #"
    comma: ","
    doubleBackSlash: "\\\\\\\\(?:\\h*\\[\\h*\\d+\\h*[a-zA-Z]+\\h*\\])?"
  namedGroupingBracesBrackets:
    follow: "\\h|\\R|\\{|\\[|\\$|\\)|\\("
    name: "[0-9\\.a-zA-Z@\\*><]+?"
  trailingComments:
    afterComment: ".*?"
    notPreceededBy: "(?<!\\\\)"
# if you want to add indentation after
# a heading, such as \part, \chapter, etc
# then populate it in here - you can add
# an indent rule to indentRules if you would
# like something other than defaultIndent
#
# you can also change the level if you like,
# or add your own title command
indentAfterHeadings:
  chapter:
    indentAfterThisHeading: 0
    level: 2
  paragraph:
    indentAfterThisHeading: 1
    level: 6
  part:
    indentAfterThisHeading: 0
    level: 1
  section:
    indentAfterThisHeading: 1
    level: 3
  subparagraph:
    indentAfterThisHeading: 1
    level: 7
  subsection:
    indentAfterThisHeading: 1
    level: 4
  subsection*:
    indentAfterThisHeading: 1
    level: 4
  subsubsection:
    indentAfterThisHeading: 1
    level: 5
# if you want the script to look for \item commands
# and format it, as follows (for example),
#       \begin{itemize}
#           \item content here
#                 next line is indented
#                 next line is indented
#           \item another item
#       \end{itemize}
# then populate indentAfterItems. See also itemNames
indentAfterItems:
  description: 1
  description*: 1
  enumerate: 1
  enumerate*: 1
  itemize: 1
  itemize*: 1
  list: 1
# indent preamble
indentPreamble: 1
# if you have indent rules for particular code blocks
# then you can populate them in indentRules; for example, you might just want
# to use a space " " or maybe a double tab "\t\t"
indentRules:
  chapter:
  item:
  section:
# set indentRules globally for codeblocks; these need
# to be horizontal spaces, if they are to be used
indentRulesGlobal:
  UnNamedGroupingBracesBrackets: 0 # 0/h-space
  afterHeading: 0 # 0/h-space
  commands: 0 # 0/h-space
  environments: 0 # 0/h-space
  filecontents: 0 # 0/h-space
  ifElseFi: 0 # 0/h-space
  items: 0 # 0/h-space
  keyEqualsValuesBracesBrackets: 0 # 0/h-space
  mandatoryArguments: 0 # 0/h-space
  namedGroupingBracesBrackets: 0 # 0/h-space
  optionalArguments: 0 # 0/h-space
  specialBeginEnd: 0 # 0/h-space
# if you want to use other names for your items (for example, \part)
# then populate them here; note that you can trick latexindent.pl
# into indenting all kinds of commands (within environments specified in
# indentAfterItems) using this technique.
itemNames:
  item: 1
  myitem: 1
# preferences for information displayed in the log file
logFilePreferences:
  Dumper:
    Deparse: 1
    Indent: 1
    Pair: " => "
    Quotekeys: 0
    Sortkeys: 1
    Terse: 1
    Useqq: 1
  endLogFileWith: "--------------"
  showAmalgamatedSettings: 0
  showDecorationFinishCodeBlockTrace: 0
  showDecorationStartCodeBlockTrace: 0
  showEveryYamlRead: 1
  showGitHubInfoFooter: 1
# name of code blocks that should have their body aligned at ampersand delimiters
lookForAlignDelims:
  BNiceArrayC: 1
  BNiceArrayRC: 1
  BNiceMatrix: 1
  Bmatrix: 1
  NiceArray: 1
  NiceArrayCwithDelims: 1
  NiceArrayRCwithDelims: 1
  NiceMatrix: 1
  # nicematrix
  NiceTabular: 1
  VNiceArrayC: 1
  VNiceArrayRC: 1
  VNiceMatrix: 1
  Vmatrix: 1
  # amsmath
  align: 1
  align*: 1
  alignat: 1
  alignat*: 1
  aligned: 1
  alignedat: 1
  array: 1
  bNiceArrayC: 1
  bNiceArrayRC: 1
  bNiceMatrix: 1
  bmatrix: 1
  cases: 1
  # mathtools
  cases*: 1
  dcases: 1
  dcases*: 1
  drcases: 1
  drcases*: 1
  flalign: 1
  flalign*: 1
  listabla: 1
  longtable: 1
  longtblr: 1
  matrix: 1
  pNiceArrayC: 1
  pNiceArrayRC: 1
  pNiceMatrix: 1
  pmatrix: 1
  rcases: 1
  rcases*: 1
  split: 1
  tabu: 1
  tabular:
    alignContentAfterDoubleBackSlash: 0
    alignDoubleBackSlash: 1
    alignFinalDoubleBackSlash: 0
    alignRowsWithoutMaxDelims: 1
    delimiterJustification: "left"
    delimiterRegEx: "(?<!\\\\)(&)"
    delims: 1
    dontMeasure: 0
    justification: "left"
    lookForChildCodeBlocks: 1
    multiColumnGrouping: 0
    spacesAfterAmpersand: 1
    spacesAfterDoubleBackSlash: 1
    spacesBeforeAmpersand: 1
    spacesBeforeDoubleBackSlash: 1
  tabularx:
    delims: 1
  tabulary:
    alignDoubleBackSlash: 1
    delimiterRegEx: "(?<!\\\\)(&)"
    delims: 0
  talltblr: 1
  # tabularray
  tblr: 1
  vNiceArrayC: 1
  vNiceArrayRC: 1
  vNiceMatrix: 1
  vmatrix: 1
# assume no preamble in cls, sty, by default
lookForPreamble:
  .bib: 1
  .cls: 1
  .sty: 1
  .tex: 1
  STDIN: 1
# some users may want a finite number of backup files,
# say at most 3; in which case, they can change this maxNumberOfBackUps.
#
# If maxNumberOfBackUps is set to 0 (or less) then infinitely
# many backups are possible, unless onlyOneBackUp is switched on
maxNumberOfBackUps: 0
# maximum indentation, off by default
maximumIndentation: -1
# modifyLineBreaks will only be searched if the -m
# switch is active
#
# poly-switch examples:
#
#    BeginStartsOnOwnLine:
#       modify line breaks before a begin statement
#
#       when set to -1, e.g
#               some text some text
#               \begin{myenvironment}
#           will be changed to
#               some text some text \begin{myenvironment}
#       when set to 0, the switch is ignored
#       when set to 1, e.g
#               some text some text \begin{myenvironment}
#           will be changed to
#               some text some text
#               \begin{myenvironment}
#       when set to 2, e.g
#               some text some text \begin{myenvironment}
#           will be changed to
#               some text some text%
#               \begin{myenvironment}
#       when set to 3, e.g
#               some text some text \begin{myenvironment}
#           will be changed to
#               some text some text
#
#               \begin{myenvironment}
#
#    BodyStartsOnOwnLine:
#       modify line breaks before the beginning of the body
#
#       when set to -1, e.g
#               \begin{myenv}
#                   body text body text
#           will be changed to
#               \begin{myenv}body text body text
#       when set to 0, the switch is ignored
#       when set to 1, e.g
#               \begin{myenv}body text body text
#           will be changed to
#               \begin{myenv}
#                   body text body text
#       when set to 2, e.g
#               \begin{myenv}body text body text
#           will be changed to
#               \begin{myenv}%
#                   body text body text
#       when set to 3, e.g
#               \begin{myenv}body text body text
#           will be changed to
#               \begin{myenv}
#
#                   body text body text
#
#    EndStartsOnOwnLine:
#       modify line breaks before the end statement
#
#       when set to -1, e.g
#               some text some text
#               \end{myenvironment}
#           will be changed to
#               some text some text \end{myenvironment}
#       when set to 0, the switch is ignored
#       when set to 1, e.g
#               some text some text \end{myenvironment}
#           will be changed to
#               some text some text
#               \end{myenvironment}
#       when set to 2, e.g
#               some text some text \end{myenvironment}
#           will be changed to
#               some text some text%
#               \end{myenvironment}
#       when set to 3, e.g
#               some text some text \end{myenvironment}
#           will be changed to
#               some text some text
#
#               \end{myenvironment}
#
#    EndFinishesWithLineBreak:
#       modify line breaks after the end statement
#
#       when set to -1, e.g
#               \end{myenvironment}
#               some text some text
#           will be changed to
#                   \end{myenvironment}some text some text
#       when set to 0, the switch is ignored
#       when set to 1, e.g
#               \end{myenvironment}some text some text
#           will be changed to
#                   \end{myenvironment}
#                   some text some text
#       when set to 2, e.g
#               \end{myenvironment}some text some text
#           will be changed to
#                   \end{myenvironment}%
#                   some text some text
#       when set to 3, e.g
#               \end{myenvironment}some text some text
#           will be changed to
#                   \end{myenvironment}
#
#                   some text some text
#
# you can specify settings on a per-name basis
modifyLineBreaks:
  commands:
    CommandNameFinishesWithLineBreak: 0
    CommandStartsOnOwnLine: 0
  condenseMultipleBlankLinesInto: 1 # 0/1
  # poly-switches below here              # -1: remove, 0: off, 1: add, 2: comment+add, 3: add blank line, 4: add blank line
  environments:
    BeginStartsOnOwnLine: 0 # -1,0,1,2,3,4
    BodyStartsOnOwnLine: 0 # -1,0,1,2,3,4
    EndFinishesWithLineBreak: 0 # -1,0,1,2,3,4
    # equation*:
    #     BeginStartsOnOwnLine: 0         # -1,0,1,2,3,4
    #     BodyStartsOnOwnLine: 0          # -1,0,1,2,3,4
    #     EndStartsOnOwnLine: 0           # -1,0,1,2,3,4
    #     EndFinishesWithLineBreak: 0     # -1,0,1,2,3,4

    EndStartsOnOwnLine: 0 # -1,0,1,2,3,4
  ifElseFi:
    BodyStartsOnOwnLine: 0 # -1,0,1,2,3,4
    ElseFinishesWithLineBreak: 0 # -1,0,1,2,3,4
    ElseStartsOnOwnLine: 0 # -1,0,1,2,3,4
    FiFinishesWithLineBreak: 0 # -1,0,1,2,3,4
    # ifnum:
    #     IfStartsOnOwnLine: 0            # -1,0,1,2,3,4
    #     BodyStartsOnOwnLine: 0          # -1,0,1,2,3,4
    #     OrStartsOnOwnLine: 0            # -1,0,1,2,3,4
    #     OrFinishesWithLineBreak: 0      # -1,0,1,2,3,4
    #     ElseStartsOnOwnLine: 0          # -1,0,1,2,3,4
    #     ElseFinishesWithLineBreak: 0    # -1,0,1,2,3,4
    #     FiStartsOnOwnLine: 0            # -1,0,1,2,3,4
    #     FiFinishesWithLineBreak: 0      # -1,0,1,2,3,4

    FiStartsOnOwnLine: 0 # -1,0,1,2,3,4
    IfStartsOnOwnLine: 0 # -1,0,1,2,3,4
    OrFinishesWithLineBreak: 0 # -1,0,1,2,3,4
    OrStartsOnOwnLine: 0 # -1,0,1,2,3,4
  items:
    ItemFinishesWithLineBreak: 0 # -1,0,1,2,3,4
    ItemStartsOnOwnLine: 0 # -1,0,1,2,3,4
  keyEqualsValuesBracesBrackets:
    EqualsFinishesWithLineBreak: 0 # -1,0,1,2,3,4
    EqualsStartsOnOwnLine: 0 # -1,0,1,2,3,4
    KeyStartsOnOwnLine: 0 # -1,0,1,2,3,4
  mandatoryArguments:
    LCuBStartsOnOwnLine: 0 # -1,0,1,2,3,4
    MandArgBodyStartsOnOwnLine: 0 # -1,0,1,2,3,4
    RCuBFinishesWithLineBreak: 0 # -1,0,1,2,3,4
    RCuBStartsOnOwnLine: 0 # -1,0,1,2,3,4
  namedGroupingBracesBrackets:
    NameFinishesWithLineBreak: 0 # -1,0,1,2,3,4
    NameStartsOnOwnLine: 0 # -1,0,1,2,3,4
  oneSentencePerLine:
    manipulateSentences: 0 # 0/1
    multipleSpacesToSingle: 1 # 0/1
    removeSentenceLineBreaks: 1 # 0/1
    sentenceIndent: ""
    sentencesBeginWith:
      A-Z: 1 # 0/1
      a-z: 0 # 0/1
      other: 0 # regex
    sentencesDoNOTcontain:
      other: "\\\\begin" # regex
    sentencesEndWith:
      basicFullStop: 0 # 0/1
      betterFullStop: 1 # 0/1
      exclamationMark: 1 # 0/1
      other: 0 # regex
      questionMark: 1 # 0/1
    sentencesFollow:
      blankLine: 1 # 0/1
      commentOnPreviousLine: 1 # 0/1
      exclamationMark: 1 # 0/1
      fullStop: 1 # 0/1
      other: 0 # regex
      par: 1 # 0/1
      questionMark: 1 # 0/1
      rightBrace: 1 # 0/1
    textWrapSentences: 0 # 1 disables main textWrap
  optionalArguments:
    LSqBStartsOnOwnLine: 0 # -1,0,1,2,3,4
    OptArgBodyStartsOnOwnLine: 0 # -1,0,1,2,3,4
    RSqBFinishesWithLineBreak: 0 # -1,0,1,2,3,4
    RSqBStartsOnOwnLine: 0 # -1,0,1,2,3,4
  preserveBlankLines: 1 # 0/1
  specialBeginEnd:
    SpecialBeginStartsOnOwnLine: 0 # -1,0,1,2,3,4
    SpecialBodyStartsOnOwnLine: 0 # -1,0,1,2,3,4
    SpecialEndFinishesWithLineBreak: 0 # -1,0,1,2,3,4
    SpecialEndStartsOnOwnLine: 0 # -1,0,1,2,3,4
  textWrapOptions:
    blocksBeginWith:
      0-9: 0 # 0/1
      A-Z: 1 # 0/1
      a-z: 1 # 0/1
      other: 0 # regex
    blocksEndBefore:
      commentOnOwnLine: 1 # 0/1
      filecontents: 1 # 0/1
      other: "\\\\begin\\{|\\\\\\[|\\\\end\\{" # regex
      verbatim: 1 # 0/1
    blocksFollow:
      blankLine: 1 # 0/1
      commentOnPreviousLine: 1 # 0/1
      filecontents: 1 # 0/1
      headings: 1 # 0/1
      other: "\\\\\\]|\\\\item(?:\\h|\\[)" # regex
      par: 1 # 0/1
      verbatim: 1 # 0/1
    columns: 0
    comments:
      inheritLeadingSpace: 0 # 0/1
      wrap: 0 # 0/1
    huge: "overflow" # forbid mid-word line breaks
    multipleSpacesToSingle: 1
    removeBlockLineBreaks: 1
    separator: ""
    when: "before" # before/after
  verbatim:
    VerbatimBeginStartsOnOwnLine: 0 # -1,0,1,2,3,4
    VerbatimEndFinishesWithLineBreak: 0 # -1,0,1,2,3,4
# if you don't want to have additional indentation
# in a code block, then add it to noAdditionalIndent; note that
# code blocks in this field will inherit
# the *current* level of indentation they just won't
# get any *additional* indentation
noAdditionalIndent:
  comment: 1
  document: 1
  exercises: 1
  foreach: 0
  frame: 0
  mydefinition: 1
  myexample: 1
  mysolution: 1
  problem: 1
  widepage: 1
# set noAdditionalIndent globally for codeblocks
noAdditionalIndentGlobal:
  UnNamedGroupingBracesBrackets: 0 # 0/1
  afterHeading: 0 # 0/1
  commands: 1 # 0/1
  environments: 0 # 0/1
  filecontents: 0 # 0/1
  ifElseFi: 0 # 0/1
  items: 0 # 0/1
  keyEqualsValuesBracesBrackets: 0 # 0/1
  mandatoryArguments: 0 # 0/1
  namedGroupingBracesBrackets: 0 # 0/1
  optionalArguments: 0 # 0/1
  specialBeginEnd: 0 # 0/1
# no indent blocks (not necessarily verbatim
# environments) which are marked as %\begin{noindent}
# or anything else that you detail in the following
noIndentBlock:
  cmhtest: 1
  noindent: 1
# only one backup per file:
#   - if onlyOneBackUp is 0 then, as a safety measure,
#     the number on the extension increments by 1 each time:
#           myfile.bak0, myfile.bak1, myfile.bak2
#   - if you set onlyOnebackUp to 1, then the backup file will
#     be overwritten each time (not recommended until you trust the script)
onlyOneBackUp: 0
# some preambles can contain \begin and \end statements
# that are not in their 'standard environment block', for example,
# consider the following key = values:
#    preheadhook={\begin{mdframed}[style=myframedstyle]},
#    postfoothook=\end{mdframed},
preambleCommandsBeforeEnvironments: 1
# remove trailing whitespace from all lines
removeTrailingWhitespace:
  afterProcessing: 1
  beforeProcessing: 0
# replacements, only active when either -r or -rr switches are active
replacements:
  - amalgamate: 1
  - lookForThis: 0
    that: "pl.latexindent"
    this: "latexindent.pl"
    when: "before"
# specialBeginEnd is, by default, mathmode focus, although
# there's no restrictions
specialBeginEnd:
  displayMath:
    begin: "(?<!\\\\)\\\\\\[" # \[ but *not* \\[
    end: "\\\\\\]" # \]
    lookForThis: 1
  displayMathTeX:
    begin: "\\$\\$" # $$
    end: "\\$\\$" # $$
    lookForThis: 1
  inlineMath:
    begin: "(?<!\\$)(?<!\\\\)\\$(?!\\$)" # $ but *not* \$ or $$
    body: "[^$]*?" # anything *except* $
    end: "(?<!\\\\)\\$(?!\\$)" # $ but *not* \$ or $$
    lookForThis: 1
  specialBeforeCommand: 0
# verbatim commands such as \verb! body !, \lstinline$something else$
verbatimCommands:
  lstinline: 1
  renewcommand: 1
  verb: 1
# verbatim environments specified
# in this field will not be changed at all!
verbatimEnvironments:
  lstlisting: 1
  minted: 1
  pythoncode: 1
  textcode: 1
  verbatim: 1
  yamlcode: 1
