#
# === LSP: Based Pyright ===
#

[tool.basedpyright]
useLibraryCodeForTypes = true

# --- Diagnostics ---
reportMissingTypeStubs = false

# --- Type Evaluation Settings ---
strictListInference = false
strictDictionaryInference = false
strictSetInference = false

# --- Type Checking Settings ---
typeCheckingMode = "recommended"

# --- Type Checking Rule Overrides ---
reportUnknownParameterType = "information"
reportUnknownArgumentType = "information"
reportUnknownLambdaType = "information"
reportUnknownVariableType = "information"
reportUnknownMemberType = "information"

#
# === CMP: Ruff ===
#

[tool.ruff]
line-length = 88
indent-width = 4

#
# === Linting: Ruff ===
# 

[tool.ruff.lint]
select = [
    "F", # Pyflakes
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "C90", # McCabe
    "I", # I-sort
    "N", # pep8-naming
    "D", # pydocstype
    "UP", # pyupgrade
	
    # flake8
    "YTT", # 2020
    "ANN", # annotations
    "ASYNC", # async
    "S", # bandit
    "BLE", # blind-except
    "FBT", # boolean-trap
    "B", # bugbear
    "A", # builtins
    "COM", # commas
    "CPY", # copyright
    "C4", # comprehensions
    "DTZ", # datetimes
    "T10", # debugger
    "DJ", # django
    "EM", # ermsg
    "EXE", # executable
    "FA", # future-annotations
    "ISC", # implicit-str-concat
    "ICN", # import-conventions
    "LOG", # logging
    "G", # logging-format
    "INP", # no-pep420
    "PIE", # pie
    "T20", # print
    "PYI", # pyi
    "PT", # pytest-style
    "Q", # quotes
    "RSE", # raise
    "RET", # return
    "SLF", # self
    "SLOT", # slots
    "SIM", # simplify
    "TID", # tidy-imports
    "TC", # type-checking
    "INT", # gettext
    "ARG", # unused-arguments
    "PTH", # use-pathlib
    "TD", # todos
    "FIX", # fixme
    "ERA", # eradicate
    "PD", # pandas-vet
    "PGH", # pygrep-hooks
    "PLC", # PyLint Convention
    "PLE", # PyLint Error
    "PLR", # PyLint Refactor
    "PLW", # PyLint Warning
    "TRY", # Tryceratops
    "FLY", # flynt
    "NPY", # NumPy
    "FAST", # FastAPI
    "AIR", # Airflow
    "PERF", # Perflint
    "FURB", # refurb
    "DOC", # pydoclint
    "RUF" # Ruff-specific rules
]
ignore = ["D100", "D101", "D102", "D103", "D103", "D105", "D106", "D107"]

fixable = ["ALL"]
unfixable = ["F841", "T201", "T203"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.flake8-copyright]
author = "Patrick Armstrong"

[tool.ruff.lint.flake8-type-checking]
# Add quotes around type annotations, if doing so would allow
# an import to be moved into a type-checking block.
quote-annotations = true
strict = true

[tool.ruff.lint.isort]
case-sensitive = true
force-single-line = true
force-sort-within-sections = true
from-first = true
length-sort = true
length-sort-straight = true

[tool.ruff.lint.pycodestyle]
max-line-length = 100

[tool.ruff.lint.pydocstyle]
convention = "google"

#
# === Formatter: Lint ===
# 
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"
